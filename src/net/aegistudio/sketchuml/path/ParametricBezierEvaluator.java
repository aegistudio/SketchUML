package net.aegistudio.sketchuml.path;

import java.util.Vector;

import net.aegistudio.sketchuml.path.ParametricLinePiece.Parameter;

/**
 * Provides parametric line piece of bezier curve formed by 
 * three parametric control points. A parametric line piece
 * could be generated by two control parameters indicates
 * the start and the end current line piece.
 * 
 * @author Haoran Luo
 */
public class ParametricBezierEvaluator {
	private final Parameter p0, pctrl, p1;
	
	public ParametricBezierEvaluator(
			Parameter p0, Parameter pctrl, Parameter p1) {
		this.p0 = p0; this.pctrl = pctrl; this.p1 = p1;
	}
	
	class ParameterBezier implements Parameter {
		private final double t;
		public ParameterBezier(double t) {
			this.t = t;
		}
		
		@Override
		public double x(double[] vector) {
			return b(p0.x(vector), pctrl.x(vector), p1.x(vector), t);
		}

		@Override
		public double y(double[] vector) {
			return b(p0.y(vector), pctrl.y(vector), p1.y(vector), t);
		}

		@Override
		public double dxdai(int i, double[] vector) {
			return b(p0.dxdai(i, vector), 
					pctrl.dxdai(i, vector), 
					p1.dxdai(i, vector), t);
		}

		@Override
		public double dydai(int i, double[] vector) {
			return b(p0.dydai(i, vector), 
					pctrl.dydai(i, vector), 
					p1.dydai(i, vector), t);
		}
		
		private double b(double v0, double vc, double v1, double t) {
			double _1_t = 1 - t;
			double a0 = _1_t * _1_t;
			double ac = 2 * _1_t * t;
			double a1 = t * t;
			return a0 * v0 + ac * vc + a1 * v1;
		}
	}
	
	public ParametricLinePiece evaluate(double t1, double t2) {
		return new ParametricLinePiece(
				new ParameterBezier(t1), 
				new ParameterBezier(t2));
	}
	
	public void proximate(Vector<ParametricLinePiece> result, int numPieces) {
		double dt = 1. / numPieces;
		for(int i = 0; i < numPieces; ++ i)
			result.add(evaluate(i * dt, (i + 1) * dt));
	}
	
	public Vector<ParametricLinePiece> proximate(int numPieces) {
		Vector<ParametricLinePiece> result = new Vector<>();
		proximate(result, numPieces);
		return result;
	}
}
